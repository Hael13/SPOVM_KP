#include "stdafx.h"
#include "ConnectedToServer.h"


ConnectedToServer::ConnectedToServer() :Client()
{

}

void ConnectedToServer::get_connection(char * ip)
{
	SOCKADDR_IN addr;
	int sizeofaddr = sizeof(addr);
	addr.sin_addr.s_addr = inet_addr(ip);
	addr.sin_port = htons(1111);
	addr.sin_family = AF_INET;

	this->server = socket(AF_INET, SOCK_STREAM, NULL);
	if (connect(this->server, (sockaddr*)&addr, sizeof(addr)) != 0)
		throw std::exception("Server connection is missed");

	std::cout << "Connected to server" << std::endl;
}

void ConnectedToServer::get()
{
	
	int request;

	std::cout << "Choose file: ";
	std::cin >> request;
	std::getchar();
	request--;

	char name[256];
	std::cout << "Input download path: ";
	std::cin >> name;
	std::getchar();
	this->reciving_file.create(name);
	char l_c_d = 'c';
	send(this->server, (char*)&l_c_d, sizeof(char), 0);
	send(this->server, (char*)&request, sizeof(int), 0);
	if (recv(this->server, (char*)&request, sizeof(int), 0) == 0)
		throw std::exception("Server connection is missed");
	if (request == -1)
		throw UserException("No such file");
	reciving(this);
}

void ConnectedToServer::help()
{
	system("cls");
	std::cout << "1.File list" << std::endl;
	std::cout << "2.Download" << std::endl;
	std::cout << "0.Disconnect" << std::endl;
}

/////////////////////////////////////////////////////////////////////////////////
//void ConnectedToServer::get(int request, char * filename)
//{
//	HANDLE temp;
//	this->reciving_file.create(filename);
//	temp = this->reciving_file.open();
//	char l_c_d = 'c';
//	send(this->server, (char*)&l_c_d, sizeof(char), 0);
//	send(this->server, (char*)&request, sizeof(int), 0);
//	send(this->server, (char*)&temp, sizeof(HANDLE), 0);
//}
////////////////////////////////////////////////////////////////////////////////

ConnectedToServer::~ConnectedToServer()
{
}

void reciving(ConnectedToServer *client)
{

	File temp;
	DWORD size, full_size;
	int writen;
	int sizeofaddr, request;
	SOCKET sender;
	char buf[16384];
	//определение файла
	temp = client->reciving_file;
	temp.open();
	if (recv(client->server, (char*)&size, sizeof(DWORD), 0) == 0)
		throw std::exception("Server connection is missed");
	//приём данных
	full_size = size;
	while (size > 16384)
	{
		writen = 0;
		writen = recv(client->server, buf, sizeof(buf), 0);
		if (writen == 0)
			throw std::exception("Server connection is missed");
		temp.write(buf, writen);
		size -= writen;
	}
	if (size > 0)
	{
		writen = 0;
		writen = recv(client->server, buf, sizeof(buf), 0);
		if (writen == 0)
			throw std::exception("Server connection is missed");
		temp.write(buf, writen);
	}

	std::cout << "DONE" << std::endl;
	getchar();
	temp.close();
}
