#include "stdafx.h"
#include "ViewClient.h"

// диалоговое окно ViewClient

IMPLEMENT_DYNAMIC(ViewClient, CDialog)

ViewClient::ViewClient(Client *client, CWnd* pParent /*=NULL*/): CDialog(IDD_DIALOG1, pParent)
{
	this->client = client;
}

ViewClient::~ViewClient()
{
	this->client->disconnect();
}

void ViewClient::show_list(char **list)
{
	this->listbox.ResetContent();
	for (int i = 0; list[i] != NULL; i++)
	{
		this->listbox.AddString(list[i]);
		delete list[i];
	}
	delete list;
	this->listbox.UpdateWindow();
}

void ViewClient::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_RECIVED_LIST, listbox);
	DDX_Control(pDX, IDC_UPDATE, update);
	DDX_Control(pDX, IDC_DISCONNECT, disconnect);
}

BEGIN_MESSAGE_MAP(ViewClient, CDialog)
	ON_BN_CLICKED(IDC_UPDATE, &ViewClient::OnBnClickedUpdate)
	ON_BN_CLICKED(IDC_DISCONNECT, &ViewClient::OnBnClickedDisconnect)
	ON_LBN_DBLCLK(IDC_RECIVED_LIST, &ViewClient::OnLbnDblclkRecivedList)
END_MESSAGE_MAP()

// обработчики сообщений ViewClient

void ViewClient::OnBnClickedUpdate()
{
	char **list;
	list = this->client->recive_list();
	this->show_list(list);
}

void ViewClient::OnBnClickedDisconnect()
{
	this->client->disconnect();
	this->EndDialog(0);
}

void ViewClient::OnLbnDblclkRecivedList()
{
	this->client->get(this->listbox.GetCurSel());
}
