#include "stdafx.h"
#include "Hub.h"

Hub::Hub()
{
	SOCKADDR_IN addr;
	addr.sin_addr.s_addr = INADDR_ANY;
	addr.sin_port = htons(2222);
	addr.sin_family = AF_INET;

	InitializeCriticalSection(&this->ready);
	this->ev = CreateEvent(NULL, TRUE, FALSE, NULL);

	this->lis = socket(AF_INET, SOCK_STREAM, NULL);
	bind(this->lis, (SOCKADDR*)&addr, sizeof(addr));
	listen(this->lis, SOMAXCONN);
}

void Hub::send_list(std::vector<connectionInfo>::iterator & client)
{
	int size;
	std::vector<connectionInfo>::iterator it;
	EnterCriticalSection(&this->ready);
	size = this->connection_list.size();
	size--;
	send(client->socket, (char*)&size, sizeof(int), 0);
	for (it = this->connection_list.begin(); it != this->connection_list.end(); it++)
	{
		if (it->socket != client->socket)
		{
			send(client->socket, it->name, 256 * sizeof(char), 0);
		}
	}
	LeaveCriticalSection(&this->ready);
}

void Hub::connect(std::vector<connectionInfo>::iterator & client)
{
	char ip[16];
	int request, i;
	std::vector<connectionInfo>::iterator it;
	if (recv(client->socket, (char*)&request, sizeof(int), 0) <= 0)
	{
		throw std::exception("Can't recv message");
	}
	EnterCriticalSection(&this->ready);
	if (request >= this->connection_list.size()-1)
	{
		request = -1;
		send(client->socket, (char*)&request, sizeof(int), 0);
		return;
	}
	send(client->socket, (char*)&request, sizeof(int), 0);
	it = this->connection_list.begin();
	for (i = 0; i <= request; i++)
	{
		if (it->socket == client->socket)
		{
			continue;
		}
		it++;
	}
	LeaveCriticalSection(&this->ready);
	strcpy(ip, inet_ntoa(it->addr.sin_addr));
	send(client->socket, ip, sizeof(ip), 0);
}

void Hub::disconnect(std::vector<connectionInfo>::iterator & client)
{
	closesocket(client->socket);
	EnterCriticalSection(&this->ready);
	this->connection_list.erase(client);
	LeaveCriticalSection(&this->ready);
}

Hub::~Hub()
{
	for(int i=0; i<this->connection_list.size(); i++)
	{
		closesocket(this->connection_list[i].socket);
	}
	DeleteCriticalSection(&this->ready);
	CloseHandle(this->ev);
}

void wait_for_connection(Hub *hub)
{
	connectionInfo inf;
	int sizeofaddr = sizeof(inf.addr);
	while (true)
	{
		inf.addr.sin_addr.s_addr = INADDR_ANY;
		inf.addr.sin_port = htons(2222);
		inf.addr.sin_family = AF_INET;
		inf.socket = accept(hub->lis, (SOCKADDR*)&inf.addr, &sizeofaddr);
		hostent *client;
		client = gethostbyaddr((char*)&inf.addr.sin_addr, 4, AF_INET);
		strcpy(inf.name, client->h_name);
		hub->connection_list.push_back(inf);
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)send_ip, hub, 0, NULL);
		WaitForSingleObject(hub->ev, INFINITE);
		ResetEvent(hub->ev);
	}
}

void send_ip(Hub * hub)
{
	bool fl = true;
	std::vector<connectionInfo>::iterator connection = hub->connection_list.begin();
	for (int i = 0; i < hub->connection_list.size() - 1; i++)
	{
		connection++;
	}
	SetEvent(hub->ev);
	char l_c_d;
	try 
	{
		while (fl)
		{
			if (recv(connection->socket, &l_c_d, sizeof(char), 0) <= 0)
			{
				throw std::exception("Can't recv message");
			}
			switch (l_c_d)
			{
			case 'l':
				hub->send_list(connection);
				break;
			case 'c':
				hub->connect(connection);
				break;
			case 'd':
				hub->disconnect(connection);
				fl = false;
				break;
			}
		}
	}
	catch (std::exception &ex)
	{
		hub->disconnect(connection);
	}
}
